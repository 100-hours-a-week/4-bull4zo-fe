import { MemoryRouter, Route, Routes } from 'react-router-dom'
import { Meta, StoryObj } from '@storybook/react'
import { expect, userEvent, within } from '@storybook/test'
import { vi } from 'vitest'
import { QueryProvider } from '@/app/QueryProvider'
import { CommentInput } from './commentInput'

// ðŸ§ª âœ… useParams mocking
vi.mock('react-router-dom', async () => {
  const actual = await vi.importActual('react-router-dom')
  return {
    ...actual,
    useParams: () => ({ voteId: '123' }),
  }
})

const meta: Meta<typeof CommentInput> = {
  title: 'Components/CommentInput',
  component: CommentInput,
  args: {
    content: '',
  },
  decorators: [
    (Story: any) => {
      return (
        <MemoryRouter initialEntries={['/vote/123']}>
          <QueryProvider>
            <Routes>
              <Route
                path="/vote/:voteId"
                element={
                  <div>
                    <Story />
                  </div>
                }
              />
            </Routes>
          </QueryProvider>
        </MemoryRouter>
      )
    },
  ],
  tags: ['unit test'],
}
export default meta

type Story = StoryObj<typeof CommentInput>

export const Default: Story = {
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement)

    // ëŒ“ê¸€ ìž…ë ¥ ì¡´ìž¬ ì—¬ë¶€
    expect(await canvas.findByRole('textbox', { name: 'ëŒ“ê¸€ ìž…ë ¥' })).toBeInTheDocument()
    // ëŒ“ê¸€ ìž‘ì„± ë²„íŠ¼ ì¡´ìž¬ ì—¬ë¶€
    expect(await canvas.findByRole('button', { name: 'ëŒ“ê¸€ ìž‘ì„±' })).toBeInTheDocument()
    // ëŒ“ê¸€ í…ŒìŠ¤íŠ¸ í™œì„±í™” ì—¬ë¶€
    const inputField = await canvas.findByRole('textbox', { name: 'ëŒ“ê¸€ ìž…ë ¥' })
    await userEvent.type(inputField, 'í…ŒìŠ¤íŠ¸ ëŒ“ê¸€')
    // ëŒ“ê¸€ ìž‘ì„± ë²„íŠ¼ í™œì„±í™” ì—¬ë¶€
    await canvas.findByRole('button', { name: 'ëŒ“ê¸€ ìž‘ì„±' })
  },
}
